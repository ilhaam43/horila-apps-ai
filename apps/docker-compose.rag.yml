version: '3.8'

services:
  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: recruitment_chromadb
    ports:
      - "8000:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    networks:
      - recruitment_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama for Local LLM
  ollama:
    image: ollama/ollama:latest
    container_name: recruitment_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - recruitment_network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  # N8N Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: recruitment_n8n
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n_workflows:/home/node/.n8n/workflows
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678
      - GENERIC_TIMEZONE=Asia/Jakarta
      - N8N_LOG_LEVEL=info
      - N8N_METRICS=true
    networks:
      - recruitment_network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Celery
  redis:
    image: redis:7-alpine
    container_name: recruitment_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - recruitment_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: recruitment_postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=recruitment_db
      - POSTGRES_USER=recruitment_user
      - POSTGRES_PASSWORD=recruitment_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - recruitment_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U recruitment_user -d recruitment_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for Advanced Search (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: recruitment_elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    networks:
      - recruitment_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Async Tasks
  celery_worker:
    build: .
    container_name: recruitment_celery_worker
    command: celery -A horilla worker --loglevel=info --concurrency=4
    volumes:
      - .:/app
      - media_data:/app/media
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://recruitment_user:recruitment_pass@postgres:5432/recruitment_db
    networks:
      - recruitment_network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build: .
    container_name: recruitment_celery_beat
    command: celery -A horilla beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://recruitment_user:recruitment_pass@postgres:5432/recruitment_db
    networks:
      - recruitment_network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Flower for Celery Monitoring
  flower:
    build: .
    container_name: recruitment_flower
    command: celery -A horilla flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - recruitment_network
    depends_on:
      - redis
    restart: unless-stopped

  # Nginx for Load Balancing and Static Files
  nginx:
    image: nginx:alpine
    container_name: recruitment_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - static_data:/app/static
      - media_data:/app/media
    networks:
      - recruitment_network
    depends_on:
      - web
    restart: unless-stopped

  # Main Django Application
  web:
    build: .
    container_name: recruitment_web
    ports:
      - "8080:8000"
    volumes:
      - .:/app
      - static_data:/app/static
      - media_data:/app/media
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://recruitment_user:recruitment_pass@postgres:5432/recruitment_db
      - REDIS_URL=redis://redis:6379/0
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - OLLAMA_BASE_URL=http://ollama:11434
      - N8N_BASE_URL=http://n8n:5678
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - recruitment_network
    depends_on:
      - postgres
      - redis
      - chromadb
      - ollama
      - n8n
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  chromadb_data:
    driver: local
  ollama_data:
    driver: local
  n8n_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  static_data:
    driver: local
  media_data:
    driver: local

networks:
  recruitment_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16