global
    daemon
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Intermediate configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    timeout connect 5000
    timeout client 50000
    timeout server 50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Frontend for HTTP traffic
frontend horilla_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/horilla.pem
    
    # Redirect HTTP to HTTPS
    redirect scheme https if !{ ssl_fc }
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    
    # Health check endpoint
    acl health_check path_beg /monitoring/health
    use_backend horilla_health if health_check
    
    # Static files
    acl static_files path_beg /static /media
    use_backend horilla_static if static_files
    
    # API endpoints
    acl api_requests path_beg /api
    use_backend horilla_api if api_requests
    
    # Default backend
    default_backend horilla_web

# Backend for web application
backend horilla_web
    balance roundrobin
    option httpchk GET /monitoring/health/
    http-check expect status 200
    
    # Health check configuration
    default-server check inter 10s fall 3 rise 2
    
    # Web servers
    server web1 web1:8000 check
    server web2 web2:8000 check
    server web3 web3:8000 check

# Backend for API requests (with sticky sessions)
backend horilla_api
    balance roundrobin
    cookie SERVERID insert indirect nocache
    option httpchk GET /monitoring/health/
    http-check expect status 200
    
    # Health check configuration
    default-server check inter 10s fall 3 rise 2
    
    # Web servers with cookie
    server web1 web1:8000 check cookie web1
    server web2 web2:8000 check cookie web2
    server web3 web3:8000 check cookie web3

# Backend for health checks
backend horilla_health
    balance roundrobin
    option httpchk GET /monitoring/health/
    http-check expect status 200
    
    # Faster health checks for monitoring
    default-server check inter 5s fall 2 rise 1
    
    server web1 web1:8000 check
    server web2 web2:8000 check
    server web3 web3:8000 check

# Backend for static files (nginx or direct)
backend horilla_static
    balance roundrobin
    option httpchk GET /static/favicon.ico
    
    # Static file servers
    server web1 web1:8000 check
    server web2 web2:8000 check
    server web3 web3:8000 check

# Statistics interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:admin
    stats show-legends
    stats show-node

# Frontend for monitoring services
frontend monitoring_frontend
    bind *:9090
    
    # Prometheus
    acl prometheus path_beg /prometheus
    use_backend prometheus_backend if prometheus
    
    # Grafana
    acl grafana path_beg /grafana
    use_backend grafana_backend if grafana
    
    # Flower (Celery monitoring)
    acl flower path_beg /flower
    use_backend flower_backend if flower
    
    # Default to Grafana
    default_backend grafana_backend

# Backend for Prometheus
backend prometheus_backend
    server prometheus prometheus:9090 check

# Backend for Grafana
backend grafana_backend
    server grafana grafana:3000 check

# Backend for Flower
backend flower_backend
    server flower flower:5555 check

# Global error handling
backend error_backend
    http-request return status 503 content-type "text/html" string "<html><body><h1>Service Unavailable</h1><p>All servers are currently down for maintenance.</p></body></html>"